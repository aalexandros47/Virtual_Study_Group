{"ast":null,"code":"import { createStore } from 'vuex';\nimport { auth, db } from '../firebase';\nimport firebase from 'firebase/compat/app'; // Ensure firebase is imported\n\nfunction generatePin() {\n  return Math.floor(100000 + Math.random() * 900000).toString(); // Generates a 6-digit pin\n}\nexport default createStore({\n  state: {\n    user: null,\n    studyGroups: [],\n    filteredStudyGroups: [],\n    authError: null,\n    authMessage: null,\n    generatedPin: null // Add state for generated pin\n  },\n  mutations: {\n    setUser(state, user) {\n      state.user = user;\n    },\n    setStudyGroups(state, studyGroups) {\n      state.studyGroups = studyGroups;\n      state.filteredStudyGroups = studyGroups;\n    },\n    setFilteredStudyGroups(state, studyGroups) {\n      state.filteredStudyGroups = studyGroups;\n    },\n    setAuthError(state, error) {\n      state.authError = error;\n    },\n    setAuthMessage(state, message) {\n      state.authMessage = message;\n    },\n    setGeneratedPin(state, pin) {\n      // Add mutation to set the generated pin\n      state.generatedPin = pin;\n    }\n  },\n  actions: {\n    fetchStudyGroups({\n      commit\n    }) {\n      try {\n        db.collection('studyGroups').onSnapshot(snapshot => {\n          const studyGroups = snapshot.docs.map(doc => ({\n            id: doc.id,\n            ...doc.data()\n          }));\n          commit('setStudyGroups', studyGroups);\n        });\n      } catch (error) {\n        console.error('Error fetching study groups:', error);\n      }\n    },\n    filterStudyGroups({\n      commit,\n      state\n    }, searchQuery) {\n      const filtered = state.studyGroups.filter(group => group.name.toLowerCase().includes(searchQuery.toLowerCase()) || group.description.toLowerCase().includes(searchQuery.toLowerCase()));\n      commit('setFilteredStudyGroups', filtered);\n    },\n    async login({\n      commit\n    }, {\n      email,\n      password\n    }) {\n      try {\n        const userCredential = await auth.signInWithEmailAndPassword(email, password);\n        commit('setUser', userCredential.user);\n        commit('setAuthMessage', 'Login successful!');\n        commit('setAuthError', null);\n      } catch (error) {\n        commit('setAuthError', error.message);\n        commit('setAuthMessage', null);\n        console.error('Error logging in:', error);\n      }\n    },\n    async register({\n      commit\n    }, {\n      email,\n      password\n    }) {\n      try {\n        const userCredential = await auth.createUserWithEmailAndPassword(email, password);\n        commit('setUser', userCredential.user);\n        commit('setAuthMessage', 'Registration successful! Please log in.');\n        commit('setAuthError', null);\n      } catch (error) {\n        commit('setAuthError', error.message);\n        commit('setAuthMessage', null);\n        console.error('Error registering:', error);\n      }\n    },\n    async logout({\n      commit\n    }) {\n      try {\n        await auth.signOut();\n        commit('setUser', null);\n        commit('setAuthMessage', 'Logout successful!');\n        commit('setAuthError', null);\n      } catch (error) {\n        commit('setAuthError', error.message);\n        commit('setAuthMessage', null);\n        console.error('Error logging out:', error);\n      }\n    },\n    async createStudyGroup({\n      commit,\n      state\n    }, studyGroup) {\n      try {\n        const expirationDate = new Date();\n        expirationDate.setHours(expirationDate.getHours() + studyGroup.duration); // Assuming duration is in hours\n\n        const pin = generatePin();\n        const newGroup = {\n          ...studyGroup,\n          members: [state.user.uid],\n          createdBy: state.user.uid,\n          expirationDate,\n          pin\n        };\n        await db.collection('studyGroups').add(newGroup);\n        commit('setAuthMessage', `Study group created successfully!`);\n        commit('setGeneratedPin', pin); // Set the generated pin in the state\n      } catch (error) {\n        commit('setAuthError', error.message);\n        console.error('Error creating study group:', error);\n      }\n    },\n    async joinStudyGroup({\n      commit,\n      state\n    }, {\n      groupId,\n      pin\n    }) {\n      try {\n        const groupRef = db.collection('studyGroups').doc(groupId);\n        const groupDoc = await groupRef.get();\n        if (groupDoc.exists && groupDoc.data().pin === pin) {\n          await groupRef.update({\n            members: firebase.firestore.FieldValue.arrayUnion(state.user.uid)\n          });\n          commit('setAuthMessage', 'Successfully joined the study group!');\n        } else {\n          commit('setAuthError', 'Invalid pin. Please try again.');\n        }\n      } catch (error) {\n        commit('setAuthError', error.message);\n        console.error('Error joining study group:', error);\n      }\n    },\n    async likeStudyGroup({\n      commit\n    }, groupId) {\n      try {\n        const groupRef = db.collection('studyGroups').doc(groupId);\n        await groupRef.update({\n          likes: firebase.firestore.FieldValue.increment(1)\n        });\n        commit('setAuthMessage', 'You liked this study group!');\n      } catch (error) {\n        commit('setAuthError', error.message);\n        console.error('Error liking study group:', error);\n      }\n    }\n  },\n  modules: {}\n});","map":{"version":3,"names":["createStore","auth","db","firebase","generatePin","Math","floor","random","toString","state","user","studyGroups","filteredStudyGroups","authError","authMessage","generatedPin","mutations","setUser","setStudyGroups","setFilteredStudyGroups","setAuthError","error","setAuthMessage","message","setGeneratedPin","pin","actions","fetchStudyGroups","commit","collection","onSnapshot","snapshot","docs","map","doc","id","data","console","filterStudyGroups","searchQuery","filtered","filter","group","name","toLowerCase","includes","description","login","email","password","userCredential","signInWithEmailAndPassword","register","createUserWithEmailAndPassword","logout","signOut","createStudyGroup","studyGroup","expirationDate","Date","setHours","getHours","duration","newGroup","members","uid","createdBy","add","joinStudyGroup","groupId","groupRef","groupDoc","get","exists","update","firestore","FieldValue","arrayUnion","likeStudyGroup","likes","increment","modules"],"sources":["/Users/ag47/virtual-study-group-platfor Design/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex';\nimport { auth, db } from '../firebase';\nimport firebase from 'firebase/compat/app'; // Ensure firebase is imported\n\nfunction generatePin() {\n  return Math.floor(100000 + Math.random() * 900000).toString(); // Generates a 6-digit pin\n}\n\nexport default createStore({\n  state: {\n    user: null,\n    studyGroups: [],\n    filteredStudyGroups: [],\n    authError: null,\n    authMessage: null,\n    generatedPin: null, // Add state for generated pin\n  },\n  mutations: {\n    setUser(state, user) {\n      state.user = user;\n    },\n    setStudyGroups(state, studyGroups) {\n      state.studyGroups = studyGroups;\n      state.filteredStudyGroups = studyGroups;\n    },\n    setFilteredStudyGroups(state, studyGroups) {\n      state.filteredStudyGroups = studyGroups;\n    },\n    setAuthError(state, error) {\n      state.authError = error;\n    },\n    setAuthMessage(state, message) {\n      state.authMessage = message;\n    },\n    setGeneratedPin(state, pin) {\n      // Add mutation to set the generated pin\n      state.generatedPin = pin;\n    },\n  },\n  actions: {\n    fetchStudyGroups({ commit }) {\n      try {\n        db.collection('studyGroups').onSnapshot((snapshot) => {\n          const studyGroups = snapshot.docs.map((doc) => ({\n            id: doc.id,\n            ...doc.data(),\n          }));\n          commit('setStudyGroups', studyGroups);\n        });\n      } catch (error) {\n        console.error('Error fetching study groups:', error);\n      }\n    },\n    filterStudyGroups({ commit, state }, searchQuery) {\n      const filtered = state.studyGroups.filter(\n        (group) =>\n          group.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n          group.description.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n      commit('setFilteredStudyGroups', filtered);\n    },\n    async login({ commit }, { email, password }) {\n      try {\n        const userCredential = await auth.signInWithEmailAndPassword(\n          email,\n          password\n        );\n        commit('setUser', userCredential.user);\n        commit('setAuthMessage', 'Login successful!');\n        commit('setAuthError', null);\n      } catch (error) {\n        commit('setAuthError', error.message);\n        commit('setAuthMessage', null);\n        console.error('Error logging in:', error);\n      }\n    },\n    async register({ commit }, { email, password }) {\n      try {\n        const userCredential = await auth.createUserWithEmailAndPassword(\n          email,\n          password\n        );\n        commit('setUser', userCredential.user);\n        commit('setAuthMessage', 'Registration successful! Please log in.');\n        commit('setAuthError', null);\n      } catch (error) {\n        commit('setAuthError', error.message);\n        commit('setAuthMessage', null);\n        console.error('Error registering:', error);\n      }\n    },\n    async logout({ commit }) {\n      try {\n        await auth.signOut();\n        commit('setUser', null);\n        commit('setAuthMessage', 'Logout successful!');\n        commit('setAuthError', null);\n      } catch (error) {\n        commit('setAuthError', error.message);\n        commit('setAuthMessage', null);\n        console.error('Error logging out:', error);\n      }\n    },\n    async createStudyGroup({ commit, state }, studyGroup) {\n      try {\n        const expirationDate = new Date();\n        expirationDate.setHours(\n          expirationDate.getHours() + studyGroup.duration\n        ); // Assuming duration is in hours\n\n        const pin = generatePin();\n        const newGroup = {\n          ...studyGroup,\n          members: [state.user.uid],\n          createdBy: state.user.uid,\n          expirationDate,\n          pin,\n        };\n        await db.collection('studyGroups').add(newGroup);\n        commit('setAuthMessage', `Study group created successfully!`);\n        commit('setGeneratedPin', pin); // Set the generated pin in the state\n      } catch (error) {\n        commit('setAuthError', error.message);\n        console.error('Error creating study group:', error);\n      }\n    },\n    async joinStudyGroup({ commit, state }, { groupId, pin }) {\n      try {\n        const groupRef = db.collection('studyGroups').doc(groupId);\n        const groupDoc = await groupRef.get();\n\n        if (groupDoc.exists && groupDoc.data().pin === pin) {\n          await groupRef.update({\n            members: firebase.firestore.FieldValue.arrayUnion(state.user.uid),\n          });\n          commit('setAuthMessage', 'Successfully joined the study group!');\n        } else {\n          commit('setAuthError', 'Invalid pin. Please try again.');\n        }\n      } catch (error) {\n        commit('setAuthError', error.message);\n        console.error('Error joining study group:', error);\n      }\n    },\n    async likeStudyGroup({ commit }, groupId) {\n      try {\n        const groupRef = db.collection('studyGroups').doc(groupId);\n        await groupRef.update({\n          likes: firebase.firestore.FieldValue.increment(1),\n        });\n        commit('setAuthMessage', 'You liked this study group!');\n      } catch (error) {\n        commit('setAuthError', error.message);\n        console.error('Error liking study group:', error);\n      }\n    },\n  },\n  modules: {},\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}