{"ast":null,"code":"import { db } from '../firebase';\nexport default {\n  name: 'DiscussionBoard',\n  props: {\n    studyGroupId: String\n  },\n  data() {\n    return {\n      newMessage: '',\n      messages: []\n    };\n  },\n  methods: {\n    async postMessage() {\n      if (this.newMessage.trim() === '') return;\n      const message = {\n        username: this.$store.state.user.email,\n        text: this.newMessage,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp()\n      };\n      try {\n        await db.collection('studyGroups').doc(this.studyGroupId).collection('messages').add(message);\n        this.newMessage = '';\n      } catch (error) {\n        console.error('Error posting message:', error);\n      }\n    },\n    fetchMessages() {\n      db.collection('studyGroups').doc(this.studyGroupId).collection('messages').orderBy('timestamp').onSnapshot(snapshot => {\n        this.messages = snapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n      });\n    }\n  },\n  created() {\n    this.fetchMessages();\n  }\n};","map":{"version":3,"names":["db","name","props","studyGroupId","String","data","newMessage","messages","methods","postMessage","trim","message","username","$store","state","user","email","text","timestamp","firebase","firestore","FieldValue","serverTimestamp","collection","doc","add","error","console","fetchMessages","orderBy","onSnapshot","snapshot","docs","map","id","created"],"sources":["/Users/ag47/virtual-study-group-platfor Design/src/components/DiscussionBoard.vue"],"sourcesContent":["<template>\n  <div class=\"discussion-board\">\n    <h3 class=\"text-2xl font-bold mb-4\">Discussion</h3>\n    <div class=\"messages mb-4\">\n      <div\n        v-for=\"message in messages\"\n        :key=\"message.id\"\n        class=\"message bg-gray-200 p-2 rounded-lg mb-2\"\n      >\n        <p class=\"font-bold\">{{ message.username }}:</p>\n        <p>{{ message.text }}</p>\n      </div>\n    </div>\n    <form @submit.prevent=\"postMessage\" class=\"message-form\">\n      <input\n        type=\"text\"\n        v-model=\"newMessage\"\n        placeholder=\"Type your message\"\n        class=\"w-full p-2 border rounded-lg mb-2 focus:outline-none focus:ring-2 focus:ring-blue-600\"\n      />\n      <button\n        type=\"submit\"\n        class=\"bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-full transition duration-300\"\n      >\n        Post\n      </button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { db } from '../firebase';\n\nexport default {\n  name: 'DiscussionBoard',\n  props: {\n    studyGroupId: String,\n  },\n  data() {\n    return {\n      newMessage: '',\n      messages: [],\n    };\n  },\n  methods: {\n    async postMessage() {\n      if (this.newMessage.trim() === '') return;\n      const message = {\n        username: this.$store.state.user.email,\n        text: this.newMessage,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      };\n      try {\n        await db\n          .collection('studyGroups')\n          .doc(this.studyGroupId)\n          .collection('messages')\n          .add(message);\n        this.newMessage = '';\n      } catch (error) {\n        console.error('Error posting message:', error);\n      }\n    },\n    fetchMessages() {\n      db.collection('studyGroups')\n        .doc(this.studyGroupId)\n        .collection('messages')\n        .orderBy('timestamp')\n        .onSnapshot((snapshot) => {\n          this.messages = snapshot.docs.map((doc) => ({\n            id: doc.id,\n            ...doc.data(),\n          }));\n        });\n    },\n  },\n  created() {\n    this.fetchMessages();\n  },\n};\n</script>\n\n<style scoped>\n.discussion-board {\n  max-width: 600px;\n  margin: 0 auto;\n}\n\n.message-form {\n  display: flex;\n  flex-direction: column;\n}\n\n.message {\n  padding: 1em;\n  border-radius: 8px;\n  background-color: #f0f0f0;\n  margin-bottom: 1em;\n}\n\n.message p {\n  margin: 0;\n}\n</style>\n"],"mappings":"AA+BA,SAASA,EAAC,QAAS,aAAa;AAEhC,eAAe;EACbC,IAAI,EAAE,iBAAiB;EACvBC,KAAK,EAAE;IACLC,YAAY,EAAEC;EAChB,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE,EAAE;MACdC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,WAAWA,CAAA,EAAG;MAClB,IAAI,IAAI,CAACH,UAAU,CAACI,IAAI,CAAC,MAAM,EAAE,EAAE;MACnC,MAAMC,OAAM,GAAI;QACdC,QAAQ,EAAE,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,IAAI,CAACC,KAAK;QACtCC,IAAI,EAAE,IAAI,CAACX,UAAU;QACrBY,SAAS,EAAEC,QAAQ,CAACC,SAAS,CAACC,UAAU,CAACC,eAAe,CAAC;MAC3D,CAAC;MACD,IAAI;QACF,MAAMtB,EAAC,CACJuB,UAAU,CAAC,aAAa,EACxBC,GAAG,CAAC,IAAI,CAACrB,YAAY,EACrBoB,UAAU,CAAC,UAAU,EACrBE,GAAG,CAACd,OAAO,CAAC;QACf,IAAI,CAACL,UAAS,GAAI,EAAE;MACtB,EAAE,OAAOoB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC;IACDE,aAAaA,CAAA,EAAG;MACd5B,EAAE,CAACuB,UAAU,CAAC,aAAa,EACxBC,GAAG,CAAC,IAAI,CAACrB,YAAY,EACrBoB,UAAU,CAAC,UAAU,EACrBM,OAAO,CAAC,WAAW,EACnBC,UAAU,CAAEC,QAAQ,IAAK;QACxB,IAAI,CAACxB,QAAO,GAAIwB,QAAQ,CAACC,IAAI,CAACC,GAAG,CAAET,GAAG,KAAM;UAC1CU,EAAE,EAAEV,GAAG,CAACU,EAAE;UACV,GAAGV,GAAG,CAACnB,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;MACL,CAAC,CAAC;IACN;EACF,CAAC;EACD8B,OAAOA,CAAA,EAAG;IACR,IAAI,CAACP,aAAa,CAAC,CAAC;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}